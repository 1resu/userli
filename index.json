[
{
	"uri": "/userli/development/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "Built with Hugo and hosted on Github Pages",
	"content": " This page describes how to edit the documentation you\u0026rsquo;re currently reading. The whole documentation is located in the directory hugo. Change into this directory. All following commands are supposed to be run from here.\ncd hugo  Requirements Download Hugo binary for your OS (Windows, Linux, Mac).\nEditing Change files in hugo/content to edit the documentation. See the DocDock documentation for more information on how to organize content. Afterwards, commit your work to your repository.\ngit commit -a  Testing Run hugo locally to see if your content looks like you imagined.\nhugo server  Open http://localhost:1313/ in your local browser.\nPublishing Run the following script to commit to the branch gh-pages. From there, github auto-deploys the documentation.\n./publish_docs.sh  See Hugo documentation for more details.\n"
},
{
	"uri": "/userli/getting-started/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": " Requirements  PHP \u0026gt;= 7.1 MariaDB or MySQL libsodium OpenSSL binary (for MailCrypt feature)  Libsodium is already included in PHP 7.2. You can also run this application with PostgreSQL oder SQLite.\n Installation The following steps are here to help you instal Userli.\n  Configuration Adjust the default values by creating a .env file.\n  Finalize the setup Last steps to make Userli work properly.\n  Commands This app brings custom commands:\n  Screenshots Some pictures of Userli features\n  "
},
{
	"uri": "/userli/getting-started/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "The following steps are here to help you instal Userli.\nConfigure prerequisites: # Setup database and user mysql -e 'CREATE DATABASE mail' mysql -e 'CREATE USER `mailuser`@`localhost` IDENTIFIED BY \u0026quot;\u0026lt;password\u0026gt;\u0026quot;' mysql -e 'GRANT INSERT,SELECT,UPDATE ON mail.* TO `mailuser`@`localhost`' mysql -e 'GRANT DELETE ON mail.virtual_aliases TO `mailuser`@`localhost`' mysql -e 'GRANT DELETE ON mail.virtual_vouchers TO `mailuser`@`localhost`'  Get the code Install the latest release:\nmkdir userli \u0026amp;\u0026amp; cd userli wget https://github.com/systemli/userli/releases/download/x.x.x/userli-x.x.x.tar.gz # Check signature and hash sum, if you know how to tar -xvzf userli-x.x.x.tar.gz # Copy .env file cp .env.dist .env "
},
{
	"uri": "/userli/development/code_of_conduct/",
	"title": "Code of Conduct",
	"tags": [],
	"description": "Everyone welcome",
	"content": " Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\nOur Standards Examples of behavior that contributes to creating a positive environment include:\n Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members  Examples of unacceptable behavior by participants include:\n The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others\u0026rsquo; private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting  Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\nScope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\nEnforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at userli@systemli.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u0026rsquo;s leadership.\nAttribution This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n"
},
{
	"uri": "/userli/getting-started/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "Adjust the default values by creating a .env file.\nAPP_ENV=prod APP_NAME=Userli APP_SECRET=\u0026lt;random secret string\u0026gt; APP_URL=https://users.example.org/ DATABASE_DRIVER=pdo_mysql DATABASE_URL=mysql://mailuser:\u0026lt;password\u0026gt;@127.0.0.1:3306/mail MAILER_URL=smtp://localhost:25?encryption=\u0026amp;auth_mode= PROJECT_NAME=example.org PROJECT_URL=https://www.example.org/ DOMAIN=example.org SENDER_ADDRESS=userli@example.org NOTIFICATION_ADDRESS=admin@example.org SEND_MAIL=true LOCALE=en HAS_SINA_BOX=false MAIL_CRYPT_ENABLED=1 MAIL_CRYPT_AUTO=1 "
},
{
	"uri": "/userli/development/",
	"title": "Development",
	"tags": [],
	"description": "",
	"content": " Requirements  Vagrant  Start Vagrant box git submodule update --init cd vagrant \u0026amp;\u0026amp; vagrant up \u0026amp;\u0026amp; vagrant ssh # create database and schema bin/console doctrine:schema:create # load sample data bin/console doctrine:fixtures:load # get node modules yarn # update assets yarn encore dev  The doctrine:fixtures:load command will create four new accounts with corresponding roles (admin, user, support, suspicious) as well as some random aliases and vouchers. The domain for all accounts is \u0026ldquo;example.org\u0026rdquo; and the password is \u0026ldquo;password\u0026rdquo;.\nIf you want to see more details about how the users are created, see src/DataFixtures.\nVisit you local instance at http://192.168.33.99/.\nTests cd vagrant \u0026amp;\u0026amp; vagrant up \u0026amp;\u0026amp; vagrant ssh make test   Documentation Built with Hugo and hosted on Github Pages\n  Code of Conduct Everyone welcome\n  "
},
{
	"uri": "/userli/getting-started/finalize/",
	"title": "Finalize the setup",
	"tags": [],
	"description": "",
	"content": "Last steps to make Userli work properly.\nCreate database scheme # Create default database schema bin/console doctrine:schema:create # Load default reserved names into database bin/console app:reservednames:import # Warm up cache bin/console cache:warmup  Cronjobs Some cronjobs are needed in order to run regular tasks:\n# Daily purge data from deleted mail users @daily userli cd /path/to/userli \u0026amp;\u0026amp; bin/console app:users:remove -q # Daily unlink old redeemed vouchers @daily userli cd /path/to/userli \u0026amp;\u0026amp; bin/console app:voucher:unlink # Send weekly report to admins 12 13 * * 1 userli cd /path/to/userli \u0026amp;\u0026amp; bin/console app:report:weekly "
},
{
	"uri": "/userli/getting-started/commands/",
	"title": "Commands",
	"tags": [],
	"description": "",
	"content": "This app brings custom commands:\napp:munin:account # Return number of account to munin app:munin:alias # Return number of aliases to munin app:munin:voucher # Return number of vouchers to munin app:registration:mail # Send a registration mail to a user app:report:weekly # Send weekly report to all admins app:reservednames:import # Import reserved names from stdin or file app:users:check # Check if user is present app:users:mailcrypt # Get MailCrypt values for user app:users:quota # Get quota of user if set app:users:remove # Removes all mailboxes from deleted users app:voucher:create # Create voucher for a specific user app:voucher:unlink # Remove connection between vouchers and accounts after 3 months  Get more information about each command by running:\nbin/console {{ command }} --help "
},
{
	"uri": "/userli/getting-started/screenshots/",
	"title": "Screenshots",
	"tags": [],
	"description": "",
	"content": "Some pictures of Userli features\nRecover lost password Change password and delete account Manage alias adresses Invite friends Admin Frontend "
},
{
	"uri": "/userli/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/userli/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/userli/",
	"title": "Userli Documentation",
	"tags": [],
	"description": "Web application to (self-) manage email users and encrypt their mailboxes.",
	"content": " Userli Documentation Web application to (self-) manage email users and encrypt their mailboxes.\nFeatures  User self-service (change password/recovery token, set aliases, \u0026hellip;) Invite code system (new users get three invite codes after one week) Domain admins (accounts with admin rights for one domain) Random alias feature for users Recovery tokens to restore accounts when password got lost Support for Dovecot mailbox encryption Multi-language support (English and German provided)  This is a start. Please help to improve the documentation.\n"
}]