<?php

namespace App\Tests\Handler;

use App\Entity\Domain;
use App\Entity\User;
use App\Handler\GpgKeyHandler;
use App\Handler\OpenPGPWkdHandler;
use App\Model\OpenPGPKey;
use Doctrine\Common\Persistence\ObjectManager;
use PHPUnit\Framework\TestCase;

class OpenPGPWkdHandlerTest extends TestCase
{
    private $user;
    private $localPart = 'admin';
    private $domain = 'example.org';
    private $wkdDirectory = '/tmp/wkd';
    private $wkdFormat = 'advanced';
    private $keyData = 'keydata';
    private $keyId = 'A3256B0C852AC9F4';
    private $keyFingerprint = '196B 10D7 2D70 A634 0811  FA6D A325 6B0C 852A C9F4';
    private $wkdHash = '4y36rkzdjnzmk3oxaekyi5biowgr5kcz';
    private $wkdPath;

    protected function setUp(): void
    {
        $domain = new Domain();
        $domain->setName($this->domain);
        $this->user = new User();
        $this->user->setDomain($domain);
        $this->user->setEmail($this->localPart . '@' . $domain->getName());
        $this->wkdPath = $this->wkdDirectory . DIRECTORY_SEPARATOR . $this->domain . DIRECTORY_SEPARATOR . 'hu' . DIRECTORY_SEPARATOR . $this->wkdHash;

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    private function createHandler()
    {
        $manager = $this->getMockBuilder(ObjectManager::class)
            ->disableOriginalConstructor()
            ->getMock();

        $keyHandler = $this->getMockBuilder(GpgKeyHandler::class)
            ->disableOriginalConstructor()
            ->getMock();
        $keyHandler->method('import');
        $keyHandler->method('getKey')->willReturn($this->keyData);
        $keyHandler->method('getId')->willReturn($this->keyId);
        $keyHandler->method('getFingerprint')->willReturn($this->keyFingerprint);

        return new OpenPGPWkdHandler($manager, $keyHandler, $this->wkdDirectory, $this->wkdFormat);
    }

    public function testImportKey(): void
    {
        $expected = new OpenPGPKey($this->keyData, $this->keyId, $this->keyFingerprint);

        $handler = $this->createHandler();
        $wkdKey = $handler->importKey($this->user, $this->keyData);

        self::assertEquals($expected, $wkdKey);
        self::assertEquals($this->user->getWkdKey(), $wkdKey->getData());

        self::assertFileExists($this->wkdPath);
    }

    public function testDeleteKey(): void
    {
        $this->user->setWkdKey(base64_encode($this->keyData));
        if (!is_dir(dirname($this->wkdPath))) {
            mkdir(dirname($this->wkdPath), 0755, true);
        }
        touch($this->wkdPath);

        $handler = $this->createHandler();
        $handler->deleteKey($this->user);

        self::assertNull($this->user->getWkdKey());
        self::assertFileNotExists($this->wkdPath);
    }

    public function testExportKeyToWKD(): void
    {
        $this->user->setWkdKey(base64_encode($this->keyData));
        if (!is_dir(dirname($this->wkdPath))) {
            mkdir(dirname($this->wkdPath), 0755, true);
        } elseif (is_file($this->wkdPath)) {
            unlink($this->wkdPath);
        }

        $handler = $this->createHandler();
        $handler->exportKeyToWKD($this->user);

        self::assertFileExists($this->wkdPath);
        self::assertEquals($this->keyData, file_get_contents($this->wkdPath));
    }
}
